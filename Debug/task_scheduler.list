
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001010  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080011a8  080011a8  000111a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011f0  080011f0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080011f0  080011f0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011f0  080011f0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011f0  080011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011f4  080011f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080011f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000060  08001258  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08001258  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000119d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000571  00000000  00000000  00021270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  000217e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000151  00000000  00000000  000219c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fa2b  00000000  00000000  00021b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c9b  00000000  00000000  00031544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000553f5  00000000  00000000  000331df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c64  00000000  00000000  000885d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00089238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001190 	.word	0x08001190

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08001190 	.word	0x08001190

080001d8 <led_init>:
 *      Author: malef
 */

#include "led.h"
#include "stm32f411xe.h"
void led_init(void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;   //Eanble clocks for GPIOA and C
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <led_init+0x34>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <led_init+0x34>)
 80001e2:	f043 0305 	orr.w	r3, r3, #5
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

    //Configure outputs
    GPIOA->MODER |= GPIO_MODER_MODER8_0;
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <led_init+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <led_init+0x38>)
 80001ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001f2:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (GPIO_MODER_MODER8_0| GPIO_MODER_MODER6_0|  GPIO_MODER_MODER5_0);
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <led_init+0x3c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <led_init+0x3c>)
 80001fa:	f443 338a 	orr.w	r3, r3, #70656	; 0x11400
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000
 8000214:	40020800 	.word	0x40020800

08000218 <main>:
    void (*task_handler)(void);

}TCB_t;

TCB_t user_tasks[MAX_TASKS];
int main(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
    enable_processor_faults();
 800021c:	f000 fa24 	bl	8000668 <enable_processor_faults>
    init_sched_stack(SCHED_STACK_START );
 8000220:	4807      	ldr	r0, [pc, #28]	; (8000240 <main+0x28>)
 8000222:	f000 f991 	bl	8000548 <init_sched_stack>
    init_task_stack();
 8000226:	f000 f993 	bl	8000550 <init_task_stack>
    led_init();
 800022a:	f7ff ffd5 	bl	80001d8 <led_init>
    init_systick_timer(TICK_HZ);
 800022e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000232:	f000 f847 	bl	80002c4 <init_systick_timer>
    switch_sp_to_psp();
 8000236:	f000 f8dd 	bl	80003f4 <switch_sp_to_psp>
    task1_handler();
 800023a:	f000 f807 	bl	800024c <task1_handler>

    for (;;){
 800023e:	e7fe      	b.n	800023e <main+0x26>
 8000240:	2001ec00 	.word	0x2001ec00

08000244 <idle_task>:

    }

}
void idle_task(void){
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
    while (1);
 8000248:	e7fe      	b.n	8000248 <idle_task+0x4>
	...

0800024c <task1_handler>:

}

void task1_handler(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
    for (;;){
        GPIOA->ODR ^= GPIO_ODR_ODR_8;
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <task1_handler+0x1c>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	4a04      	ldr	r2, [pc, #16]	; (8000268 <task1_handler+0x1c>)
 8000256:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 800025a:	6153      	str	r3, [r2, #20]
        task_delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f000 f8e6 	bl	8000430 <task_delay>
        GPIOA->ODR ^= GPIO_ODR_ODR_8;
 8000264:	e7f4      	b.n	8000250 <task1_handler+0x4>
 8000266:	bf00      	nop
 8000268:	40020000 	.word	0x40020000

0800026c <task2_handler>:
    }

}
void task2_handler(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    for (;;){
            GPIOC->ODR ^= GPIO_ODR_ODR_8;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <task2_handler+0x1c>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <task2_handler+0x1c>)
 8000276:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 800027a:	6153      	str	r3, [r2, #20]
            task_delay(500);
 800027c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000280:	f000 f8d6 	bl	8000430 <task_delay>
            GPIOC->ODR ^= GPIO_ODR_ODR_8;
 8000284:	e7f4      	b.n	8000270 <task2_handler+0x4>
 8000286:	bf00      	nop
 8000288:	40020800 	.word	0x40020800

0800028c <task3_handler>:
    }

}

void task3_handler(void){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
    for (;;){
            GPIOC->ODR ^= GPIO_ODR_ODR_6;
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <task3_handler+0x18>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4a03      	ldr	r2, [pc, #12]	; (80002a4 <task3_handler+0x18>)
 8000296:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800029a:	6153      	str	r3, [r2, #20]
            task_delay(250);
 800029c:	20fa      	movs	r0, #250	; 0xfa
 800029e:	f000 f8c7 	bl	8000430 <task_delay>
            GPIOC->ODR ^= GPIO_ODR_ODR_6;
 80002a2:	e7f5      	b.n	8000290 <task3_handler+0x4>
 80002a4:	40020800 	.word	0x40020800

080002a8 <task4_handler>:
        }
}

void task4_handler(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
    for (;;){
            GPIOC->ODR ^= GPIO_ODR_ODR_5;
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <task4_handler+0x18>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <task4_handler+0x18>)
 80002b2:	f083 0320 	eor.w	r3, r3, #32
 80002b6:	6153      	str	r3, [r2, #20]
            task_delay(125);
 80002b8:	207d      	movs	r0, #125	; 0x7d
 80002ba:	f000 f8b9 	bl	8000430 <task_delay>
            GPIOC->ODR ^= GPIO_ODR_ODR_5;
 80002be:	e7f5      	b.n	80002ac <task4_handler+0x4>
 80002c0:	40020800 	.word	0x40020800

080002c4 <init_systick_timer>:
 * PSC_FREQ; desired frequency
 * HSI-CLK: Internal RC oscillator frequency
 * CNT_VALUE: Reload value
 *
 */
void init_systick_timer(uint32_t tick_hz){
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
    uint32_t count_value = HSI_CLOCK/tick_hz -1;
 80002cc:	4a11      	ldr	r2, [pc, #68]	; (8000314 <init_systick_timer+0x50>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002d4:	3b01      	subs	r3, #1
 80002d6:	60fb      	str	r3, [r7, #12]
    SysTick->LOAD = count_value&0xFFFFFF;   // LOAD value length<=24bits
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <init_systick_timer+0x54>)
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002e0:	6053      	str	r3, [r2, #4]
    SysTick->VAL &= ~0x00FFFFFF;
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <init_systick_timer+0x54>)
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	4a0c      	ldr	r2, [pc, #48]	; (8000318 <init_systick_timer+0x54>)
 80002e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80002ec:	6093      	str	r3, [r2, #8]

    /*Enable Systick Exception and Select clock source*/
    SysTick -> CTRL |= SysTick_CTRL_CLKSOURCE | SysTick_CTRL_TICKINIT;
 80002ee:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <init_systick_timer+0x54>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a09      	ldr	r2, [pc, #36]	; (8000318 <init_systick_timer+0x54>)
 80002f4:	f043 0306 	orr.w	r3, r3, #6
 80002f8:	6013      	str	r3, [r2, #0]

    //Enable Counter
    SysTick ->CTRL |= SysTick_CTRL_ENABLE;
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <init_systick_timer+0x54>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a06      	ldr	r2, [pc, #24]	; (8000318 <init_systick_timer+0x54>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6013      	str	r3, [r2, #0]




}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	00f42400 	.word	0x00f42400
 8000318:	e000e010 	.word	0xe000e010

0800031c <get_psp_value>:
uint32_t get_psp_value(void){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    return user_tasks[current_task].psp_value;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <get_psp_value+0x1c>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	4a05      	ldr	r2, [pc, #20]	; (800033c <get_psp_value+0x20>)
 8000326:	011b      	lsls	r3, r3, #4
 8000328:	4413      	add	r3, r2
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000000 	.word	0x20000000
 800033c:	20000080 	.word	0x20000080

08000340 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
    user_tasks[current_task].psp_value= current_psp_value;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <save_psp_value+0x24>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4a06      	ldr	r2, [pc, #24]	; (8000368 <save_psp_value+0x28>)
 800034e:	011b      	lsls	r3, r3, #4
 8000350:	4413      	add	r3, r2
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000000 	.word	0x20000000
 8000368:	20000080 	.word	0x20000080

0800036c <update_next_task>:
/*
 *
 *
 */
void update_next_task(void){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
    uint32_t state=TASK_BLOCKING_STATE;
 8000372:	23ff      	movs	r3, #255	; 0xff
 8000374:	607b      	str	r3, [r7, #4]
    for (int i=0; i<MAX_TASKS; i++){
 8000376:	2300      	movs	r3, #0
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	e024      	b.n	80003c6 <update_next_task+0x5a>
            current_task++;
 800037c:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <update_next_task+0x7c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	b2da      	uxtb	r2, r3
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <update_next_task+0x7c>)
 8000386:	701a      	strb	r2, [r3, #0]
            current_task%=MAX_TASKS;
 8000388:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <update_next_task+0x7c>)
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <update_next_task+0x80>)
 800038e:	fba3 1302 	umull	r1, r3, r3, r2
 8000392:	0899      	lsrs	r1, r3, #2
 8000394:	460b      	mov	r3, r1
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	440b      	add	r3, r1
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <update_next_task+0x7c>)
 80003a0:	701a      	strb	r2, [r3, #0]
            state = user_tasks[current_task].current_state;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <update_next_task+0x7c>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <update_next_task+0x84>)
 80003a8:	011b      	lsls	r3, r3, #4
 80003aa:	4413      	add	r3, r2
 80003ac:	3308      	adds	r3, #8
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	607b      	str	r3, [r7, #4]
            if ((state==TASK_READY_STATE)&&(current_task!=0)){
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d103      	bne.n	80003c0 <update_next_task+0x54>
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <update_next_task+0x7c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d106      	bne.n	80003ce <update_next_task+0x62>
    for (int i=0; i<MAX_TASKS; i++){
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	3301      	adds	r3, #1
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	2b04      	cmp	r3, #4
 80003ca:	d9d7      	bls.n	800037c <update_next_task+0x10>
 80003cc:	e000      	b.n	80003d0 <update_next_task+0x64>
                break;
 80003ce:	bf00      	nop
            }

    }
    if (state!=TASK_READY_STATE){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d002      	beq.n	80003dc <update_next_task+0x70>
        current_task=0;
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <update_next_task+0x7c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
    }



}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	20000000 	.word	0x20000000
 80003ec:	cccccccd 	.word	0xcccccccd
 80003f0:	20000080 	.word	0x20000080

080003f4 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(){
    //1. Initialize PSP with TASK1 stack address
    //get the value of psp of current task
    __asm volatile("PUSH {LR}");
 80003f4:	b500      	push	{lr}
    __asm volatile("BL get_psp_value");
 80003f6:	f7ff ff91 	bl	800031c <get_psp_value>
    //Return value is stored in R0
    __asm volatile("MSR PSP,R0");   //Inialize PSP
 80003fa:	f380 8809 	msr	PSP, r0
    __asm volatile("POP {LR}");
 80003fe:	f85d eb04 	ldr.w	lr, [sp], #4
    //2. Change SP  to PSP using CONTROL register
    __asm volatile("MOV R0,#0x02");
 8000402:	f04f 0002 	mov.w	r0, #2
    __asm volatile("MSR CONTROL,R0");
 8000406:	f380 8814 	msr	CONTROL, r0

    __asm volatile("BX LR");
 800040a:	4770      	bx	lr


  }
 800040c:	bf00      	nop
	...

08000410 <schedule>:
  void schedule(void){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
     SCB->ICSR |= 1U<<28;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <schedule+0x1c>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <schedule+0x1c>)
 800041a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041e:	6053      	str	r3, [r2, #4]


  }
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <task_delay>:

  void task_delay(uint32_t tick_count){
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
    __asm volatile("CPSID I");
 8000438:	b672      	cpsid	i
    if (current_task){
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <task_delay+0x48>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d015      	beq.n	800046e <task_delay+0x3e>
            user_tasks[current_task].block_count = global_tick_count+tick_count;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <task_delay+0x4c>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <task_delay+0x48>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	441a      	add	r2, r3
 8000450:	490b      	ldr	r1, [pc, #44]	; (8000480 <task_delay+0x50>)
 8000452:	0103      	lsls	r3, r0, #4
 8000454:	440b      	add	r3, r1
 8000456:	3304      	adds	r3, #4
 8000458:	601a      	str	r2, [r3, #0]
            user_tasks[current_task].current_state = TASK_BLOCKING_STATE;
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <task_delay+0x48>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4a08      	ldr	r2, [pc, #32]	; (8000480 <task_delay+0x50>)
 8000460:	011b      	lsls	r3, r3, #4
 8000462:	4413      	add	r3, r2
 8000464:	3308      	adds	r3, #8
 8000466:	22ff      	movs	r2, #255	; 0xff
 8000468:	701a      	strb	r2, [r3, #0]
            schedule();
 800046a:	f7ff ffd1 	bl	8000410 <schedule>

    }
     __asm volatile("CPSIE I");
 800046e:	b662      	cpsie	i

  }
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000000 	.word	0x20000000
 800047c:	2000007c 	.word	0x2000007c
 8000480:	20000080 	.word	0x20000080

08000484 <PendSV_Handler>:


__attribute__((naked))void PendSV_Handler(void){
     /*Save Context of current task*/
    //1. Get current running task PSP value
   __asm volatile("MRS R0,PSP");
 8000484:	f3ef 8009 	mrs	r0, PSP
    //2. Use PSP value to store Stack Frame 2 (R4 to R11)
    __asm volatile("STMDB R0!,{R4-R11}");  //Since the Stack is full descending stack, final address is stored to R0
 8000488:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    //3. Save current PSP value
    __asm volatile("PUSH {LR}");
 800048c:	b500      	push	{lr}
    __asm volatile("BL save_psp_value");  //R0  will be passed as argument according to ARM Procedure for function calls
 800048e:	f7ff ff57 	bl	8000340 <save_psp_value>


    /*Retrieve the value of next task*/
    //1. Decide the next task
    __asm volatile("BL update_next_task");
 8000492:	f7ff ff6b 	bl	800036c <update_next_task>
    //2. Get its past psp value
    __asm volatile("BL get_psp_value");
 8000496:	f7ff ff41 	bl	800031c <get_psp_value>

    __asm volatile("POP {LR}");
 800049a:	f85d eb04 	ldr.w	lr, [sp], #4

    //3. Retrieve SF2 of this task
    __asm volatile("LDMIA R0!, {R4-R11}");
 800049e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    //4. update PSP
    __asm volatile("MSR PSP, R0");
 80004a2:	f380 8809 	msr	PSP, r0
    __asm volatile("BX LR");
 80004a6:	4770      	bx	lr

}
 80004a8:	bf00      	nop
	...

080004ac <update_global_tick_count>:

 void update_global_tick_count(void){
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
    global_tick_count++;
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <update_global_tick_count+0x18>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <update_global_tick_count+0x18>)
 80004b8:	6013      	str	r3, [r2, #0]

 }
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	2000007c 	.word	0x2000007c

080004c8 <unblock_tasks>:
 void unblock_tasks(void){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
    for (uint32_t i=1; i<MAX_TASKS; i++){
 80004ce:	2301      	movs	r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	e01b      	b.n	800050c <unblock_tasks+0x44>
        if (user_tasks[i].current_state !=TASK_READY_STATE){
 80004d4:	4a12      	ldr	r2, [pc, #72]	; (8000520 <unblock_tasks+0x58>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	4413      	add	r3, r2
 80004dc:	3308      	adds	r3, #8
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d010      	beq.n	8000506 <unblock_tasks+0x3e>
            if(user_tasks[i].block_count==global_tick_count){
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <unblock_tasks+0x58>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	011b      	lsls	r3, r3, #4
 80004ea:	4413      	add	r3, r2
 80004ec:	3304      	adds	r3, #4
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <unblock_tasks+0x5c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d106      	bne.n	8000506 <unblock_tasks+0x3e>
                user_tasks[i].current_state =TASK_READY_STATE;
 80004f8:	4a09      	ldr	r2, [pc, #36]	; (8000520 <unblock_tasks+0x58>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	4413      	add	r3, r2
 8000500:	3308      	adds	r3, #8
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
    for (uint32_t i=1; i<MAX_TASKS; i++){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3301      	adds	r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b04      	cmp	r3, #4
 8000510:	d9e0      	bls.n	80004d4 <unblock_tasks+0xc>
            }
        }
    }

 }
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000080 	.word	0x20000080
 8000524:	2000007c 	.word	0x2000007c

08000528 <SysTick_Handler>:
void SysTick_Handler(void){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    update_global_tick_count();
 800052c:	f7ff ffbe 	bl	80004ac <update_global_tick_count>
    unblock_tasks();
 8000530:	f7ff ffca 	bl	80004c8 <unblock_tasks>
    //pend PendSV exception
    SCB->ICSR |= 1U<<28;
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <SysTick_Handler+0x1c>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4a02      	ldr	r2, [pc, #8]	; (8000544 <SysTick_Handler+0x1c>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6053      	str	r3, [r2, #4]

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <init_sched_stack>:

 __attribute__((naked)) void init_sched_stack(uint32_t sched_top_of_stack){
        __asm volatile("MSR MSP,R0");  //RO takes value of first parameter according to Arm Standard
 8000548:	f380 8808 	msr	MSP, r0
        __asm volatile("BX LR");       // Return back to main
 800054c:	4770      	bx	lr

 }
 800054e:	bf00      	nop

08000550 <init_task_stack>:

 void init_task_stack(void){
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
    for (uint32_t i=0; i<MAX_TASKS; i++){
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e009      	b.n	8000570 <init_task_stack+0x20>
        user_tasks[i].current_state = TASK_READY_STATE;
 800055c:	4a37      	ldr	r2, [pc, #220]	; (800063c <init_task_stack+0xec>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	4413      	add	r3, r2
 8000564:	3308      	adds	r3, #8
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
    for (uint32_t i=0; i<MAX_TASKS; i++){
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3301      	adds	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b04      	cmp	r3, #4
 8000574:	d9f2      	bls.n	800055c <init_task_stack+0xc>

    }
    user_tasks[0].psp_value = IDLE_STACK_START;
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <init_task_stack+0xec>)
 8000578:	4a31      	ldr	r2, [pc, #196]	; (8000640 <init_task_stack+0xf0>)
 800057a:	601a      	str	r2, [r3, #0]
    user_tasks[1].psp_value = T1_STACK_START;
 800057c:	4b2f      	ldr	r3, [pc, #188]	; (800063c <init_task_stack+0xec>)
 800057e:	4a31      	ldr	r2, [pc, #196]	; (8000644 <init_task_stack+0xf4>)
 8000580:	611a      	str	r2, [r3, #16]
    user_tasks[2].psp_value = T2_STACK_START;
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <init_task_stack+0xec>)
 8000584:	4a30      	ldr	r2, [pc, #192]	; (8000648 <init_task_stack+0xf8>)
 8000586:	621a      	str	r2, [r3, #32]
    user_tasks[3].psp_value = T3_STACK_START;
 8000588:	4b2c      	ldr	r3, [pc, #176]	; (800063c <init_task_stack+0xec>)
 800058a:	4a30      	ldr	r2, [pc, #192]	; (800064c <init_task_stack+0xfc>)
 800058c:	631a      	str	r2, [r3, #48]	; 0x30
    user_tasks[4].psp_value = T4_STACK_START;
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <init_task_stack+0xec>)
 8000590:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <init_task_stack+0x100>)
 8000592:	641a      	str	r2, [r3, #64]	; 0x40


    user_tasks[0].task_handler = idle_task;
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <init_task_stack+0xec>)
 8000596:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <init_task_stack+0x104>)
 8000598:	60da      	str	r2, [r3, #12]
    user_tasks[1].task_handler = task1_handler;
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <init_task_stack+0xec>)
 800059c:	4a2e      	ldr	r2, [pc, #184]	; (8000658 <init_task_stack+0x108>)
 800059e:	61da      	str	r2, [r3, #28]
    user_tasks[2].task_handler = task2_handler;
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <init_task_stack+0xec>)
 80005a2:	4a2e      	ldr	r2, [pc, #184]	; (800065c <init_task_stack+0x10c>)
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
    user_tasks[3].task_handler = task3_handler;
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <init_task_stack+0xec>)
 80005a8:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <init_task_stack+0x110>)
 80005aa:	63da      	str	r2, [r3, #60]	; 0x3c
    user_tasks[4].task_handler = task4_handler;
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <init_task_stack+0xec>)
 80005ae:	4a2d      	ldr	r2, [pc, #180]	; (8000664 <init_task_stack+0x114>)
 80005b0:	64da      	str	r2, [r3, #76]	; 0x4c

    uint32_t *pPSP;

    for (int i=0; i< MAX_TASKS; i++){
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	e037      	b.n	8000628 <init_task_stack+0xd8>
        pPSP = (uint32_t*) user_tasks[i].psp_value;
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <init_task_stack+0xec>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	011b      	lsls	r3, r3, #4
 80005be:	4413      	add	r3, r2
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	60bb      	str	r3, [r7, #8]

        pPSP--;
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	3b04      	subs	r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
        *pPSP = PSR_VALUE;  //Initialize Dummy XPSR value,T bit is 1
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005d0:	601a      	str	r2, [r3, #0]

        pPSP--;
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	3b04      	subs	r3, #4
 80005d6:	60bb      	str	r3, [r7, #8]
        *pPSP = (uint32_t)user_tasks[i].task_handler;   //Set PC to task handler address
 80005d8:	4a18      	ldr	r2, [pc, #96]	; (800063c <init_task_stack+0xec>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	011b      	lsls	r3, r3, #4
 80005de:	4413      	add	r3, r2
 80005e0:	330c      	adds	r3, #12
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	601a      	str	r2, [r3, #0]

        pPSP--;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	3b04      	subs	r3, #4
 80005ee:	60bb      	str	r3, [r7, #8]
        *pPSP = EXC_RETURN;   //LR value
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	f06f 0202 	mvn.w	r2, #2
 80005f6:	601a      	str	r2, [r3, #0]


        for (int j=0; j<13; j++){
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	e008      	b.n	8000610 <init_task_stack+0xc0>

          pPSP--;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	3b04      	subs	r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
         *pPSP = 0;   //R0-R12 dummy data
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
        for (int j=0; j<13; j++){
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2b0c      	cmp	r3, #12
 8000614:	ddf3      	ble.n	80005fe <init_task_stack+0xae>


        }
        //store the value of PSP
        user_tasks[i].psp_value = (uint32_t)pPSP;
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	4908      	ldr	r1, [pc, #32]	; (800063c <init_task_stack+0xec>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	440b      	add	r3, r1
 8000620:	601a      	str	r2, [r3, #0]
    for (int i=0; i< MAX_TASKS; i++){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b04      	cmp	r3, #4
 800062c:	d9c4      	bls.n	80005b8 <init_task_stack+0x68>


    }

  }
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	20000080 	.word	0x20000080
 8000640:	2001f000 	.word	0x2001f000
 8000644:	20020000 	.word	0x20020000
 8000648:	2001fc00 	.word	0x2001fc00
 800064c:	2001f800 	.word	0x2001f800
 8000650:	2001f400 	.word	0x2001f400
 8000654:	08000245 	.word	0x08000245
 8000658:	0800024d 	.word	0x0800024d
 800065c:	0800026d 	.word	0x0800026d
 8000660:	0800028d 	.word	0x0800028d
 8000664:	080002a9 	.word	0x080002a9

08000668 <enable_processor_faults>:

void  enable_processor_faults(){
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
        SCB ->SHCSR |= 7<<16;  //Enable Faults
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <enable_processor_faults+0x1c>)
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <enable_processor_faults+0x1c>)
 8000672:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000676:	6253      	str	r3, [r2, #36]	; 0x24
  }
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <HardFault_Handler>:

void HardFault_Handler(void){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    printf("This HardFault Handler\n");
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <HardFault_Handler+0x10>)
 800068e:	f000 f9eb 	bl	8000a68 <puts>
  }
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	080011a8 	.word	0x080011a8

0800069c <BusFault_Handler>:
void BusFault_Handler(void){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    printf("This BusFault Handler\n");
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <BusFault_Handler+0x10>)
 80006a2:	f000 f9e1 	bl	8000a68 <puts>
  }
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	080011c0 	.word	0x080011c0

080006b0 <MemManage_Handler>:

void MemManage_Handler(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
    printf("This MemManage Handler\n");
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <MemManage_Handler+0x10>)
 80006b6:	f000 f9d7 	bl	8000a68 <puts>
  }
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	080011d8 	.word	0x080011d8

080006c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e00a      	b.n	80006ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006d6:	f3af 8000 	nop.w
 80006da:	4601      	mov	r1, r0
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	60ba      	str	r2, [r7, #8]
 80006e2:	b2ca      	uxtb	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbf0      	blt.n	80006d6 <_read+0x12>
  }

  return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b086      	sub	sp, #24
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	e009      	b.n	8000724 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	60ba      	str	r2, [r7, #8]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	3301      	adds	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	dbf1      	blt.n	8000710 <_write+0x12>
  }
  return len;
 800072c:	687b      	ldr	r3, [r7, #4]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <_close>:

int _close(int file)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800075e:	605a      	str	r2, [r3, #4]
  return 0;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <_isatty>:

int _isatty(int file)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f000 fa78 	bl	8000cc4 <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <_sbrk+0x64>)
 80007f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20020000 	.word	0x20020000
 8000800:	00000400 	.word	0x00000400
 8000804:	200000d0 	.word	0x200000d0
 8000808:	20000220 	.word	0x20000220

0800080c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000810:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <LoopForever+0x6>)
  ldr r1, =_edata
 8000816:	490d      	ldr	r1, [pc, #52]	; (800084c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <LoopForever+0xe>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800082c:	4c0a      	ldr	r4, [pc, #40]	; (8000858 <LoopForever+0x16>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800083a:	f000 fa49 	bl	8000cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083e:	f7ff fceb 	bl	8000218 <main>

08000842 <LoopForever>:

LoopForever:
  b LoopForever
 8000842:	e7fe      	b.n	8000842 <LoopForever>
  ldr   r0, =_estack
 8000844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000850:	080011f8 	.word	0x080011f8
  ldr r2, =_sbss
 8000854:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000858:	20000220 	.word	0x20000220

0800085c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC_IRQHandler>
	...

08000860 <std>:
 8000860:	2300      	movs	r3, #0
 8000862:	b510      	push	{r4, lr}
 8000864:	4604      	mov	r4, r0
 8000866:	e9c0 3300 	strd	r3, r3, [r0]
 800086a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800086e:	6083      	str	r3, [r0, #8]
 8000870:	8181      	strh	r1, [r0, #12]
 8000872:	6643      	str	r3, [r0, #100]	; 0x64
 8000874:	81c2      	strh	r2, [r0, #14]
 8000876:	6183      	str	r3, [r0, #24]
 8000878:	4619      	mov	r1, r3
 800087a:	2208      	movs	r2, #8
 800087c:	305c      	adds	r0, #92	; 0x5c
 800087e:	f000 f9d3 	bl	8000c28 <memset>
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <std+0x38>)
 8000884:	6263      	str	r3, [r4, #36]	; 0x24
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <std+0x3c>)
 8000888:	62a3      	str	r3, [r4, #40]	; 0x28
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <std+0x40>)
 800088c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <std+0x44>)
 8000890:	6224      	str	r4, [r4, #32]
 8000892:	6323      	str	r3, [r4, #48]	; 0x30
 8000894:	bd10      	pop	{r4, pc}
 8000896:	bf00      	nop
 8000898:	08000a79 	.word	0x08000a79
 800089c:	08000a9b 	.word	0x08000a9b
 80008a0:	08000ad3 	.word	0x08000ad3
 80008a4:	08000af7 	.word	0x08000af7

080008a8 <stdio_exit_handler>:
 80008a8:	4a02      	ldr	r2, [pc, #8]	; (80008b4 <stdio_exit_handler+0xc>)
 80008aa:	4903      	ldr	r1, [pc, #12]	; (80008b8 <stdio_exit_handler+0x10>)
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <stdio_exit_handler+0x14>)
 80008ae:	f000 b869 	b.w	8000984 <_fwalk_sglue>
 80008b2:	bf00      	nop
 80008b4:	20000004 	.word	0x20000004
 80008b8:	08001019 	.word	0x08001019
 80008bc:	20000010 	.word	0x20000010

080008c0 <cleanup_stdio>:
 80008c0:	6841      	ldr	r1, [r0, #4]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <cleanup_stdio+0x34>)
 80008c4:	4299      	cmp	r1, r3
 80008c6:	b510      	push	{r4, lr}
 80008c8:	4604      	mov	r4, r0
 80008ca:	d001      	beq.n	80008d0 <cleanup_stdio+0x10>
 80008cc:	f000 fba4 	bl	8001018 <_fflush_r>
 80008d0:	68a1      	ldr	r1, [r4, #8]
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <cleanup_stdio+0x38>)
 80008d4:	4299      	cmp	r1, r3
 80008d6:	d002      	beq.n	80008de <cleanup_stdio+0x1e>
 80008d8:	4620      	mov	r0, r4
 80008da:	f000 fb9d 	bl	8001018 <_fflush_r>
 80008de:	68e1      	ldr	r1, [r4, #12]
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <cleanup_stdio+0x3c>)
 80008e2:	4299      	cmp	r1, r3
 80008e4:	d004      	beq.n	80008f0 <cleanup_stdio+0x30>
 80008e6:	4620      	mov	r0, r4
 80008e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ec:	f000 bb94 	b.w	8001018 <_fflush_r>
 80008f0:	bd10      	pop	{r4, pc}
 80008f2:	bf00      	nop
 80008f4:	200000d4 	.word	0x200000d4
 80008f8:	2000013c 	.word	0x2000013c
 80008fc:	200001a4 	.word	0x200001a4

08000900 <global_stdio_init.part.0>:
 8000900:	b510      	push	{r4, lr}
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <global_stdio_init.part.0+0x30>)
 8000904:	4c0b      	ldr	r4, [pc, #44]	; (8000934 <global_stdio_init.part.0+0x34>)
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <global_stdio_init.part.0+0x38>)
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	4620      	mov	r0, r4
 800090c:	2200      	movs	r2, #0
 800090e:	2104      	movs	r1, #4
 8000910:	f7ff ffa6 	bl	8000860 <std>
 8000914:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000918:	2201      	movs	r2, #1
 800091a:	2109      	movs	r1, #9
 800091c:	f7ff ffa0 	bl	8000860 <std>
 8000920:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000924:	2202      	movs	r2, #2
 8000926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800092a:	2112      	movs	r1, #18
 800092c:	f7ff bf98 	b.w	8000860 <std>
 8000930:	2000020c 	.word	0x2000020c
 8000934:	200000d4 	.word	0x200000d4
 8000938:	080008a9 	.word	0x080008a9

0800093c <__sfp_lock_acquire>:
 800093c:	4801      	ldr	r0, [pc, #4]	; (8000944 <__sfp_lock_acquire+0x8>)
 800093e:	f000 b9eb 	b.w	8000d18 <__retarget_lock_acquire_recursive>
 8000942:	bf00      	nop
 8000944:	20000215 	.word	0x20000215

08000948 <__sfp_lock_release>:
 8000948:	4801      	ldr	r0, [pc, #4]	; (8000950 <__sfp_lock_release+0x8>)
 800094a:	f000 b9e6 	b.w	8000d1a <__retarget_lock_release_recursive>
 800094e:	bf00      	nop
 8000950:	20000215 	.word	0x20000215

08000954 <__sinit>:
 8000954:	b510      	push	{r4, lr}
 8000956:	4604      	mov	r4, r0
 8000958:	f7ff fff0 	bl	800093c <__sfp_lock_acquire>
 800095c:	6a23      	ldr	r3, [r4, #32]
 800095e:	b11b      	cbz	r3, 8000968 <__sinit+0x14>
 8000960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000964:	f7ff bff0 	b.w	8000948 <__sfp_lock_release>
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <__sinit+0x28>)
 800096a:	6223      	str	r3, [r4, #32]
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__sinit+0x2c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1f5      	bne.n	8000960 <__sinit+0xc>
 8000974:	f7ff ffc4 	bl	8000900 <global_stdio_init.part.0>
 8000978:	e7f2      	b.n	8000960 <__sinit+0xc>
 800097a:	bf00      	nop
 800097c:	080008c1 	.word	0x080008c1
 8000980:	2000020c 	.word	0x2000020c

08000984 <_fwalk_sglue>:
 8000984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000988:	4607      	mov	r7, r0
 800098a:	4688      	mov	r8, r1
 800098c:	4614      	mov	r4, r2
 800098e:	2600      	movs	r6, #0
 8000990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000994:	f1b9 0901 	subs.w	r9, r9, #1
 8000998:	d505      	bpl.n	80009a6 <_fwalk_sglue+0x22>
 800099a:	6824      	ldr	r4, [r4, #0]
 800099c:	2c00      	cmp	r4, #0
 800099e:	d1f7      	bne.n	8000990 <_fwalk_sglue+0xc>
 80009a0:	4630      	mov	r0, r6
 80009a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009a6:	89ab      	ldrh	r3, [r5, #12]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d907      	bls.n	80009bc <_fwalk_sglue+0x38>
 80009ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009b0:	3301      	adds	r3, #1
 80009b2:	d003      	beq.n	80009bc <_fwalk_sglue+0x38>
 80009b4:	4629      	mov	r1, r5
 80009b6:	4638      	mov	r0, r7
 80009b8:	47c0      	blx	r8
 80009ba:	4306      	orrs	r6, r0
 80009bc:	3568      	adds	r5, #104	; 0x68
 80009be:	e7e9      	b.n	8000994 <_fwalk_sglue+0x10>

080009c0 <_puts_r>:
 80009c0:	6a03      	ldr	r3, [r0, #32]
 80009c2:	b570      	push	{r4, r5, r6, lr}
 80009c4:	6884      	ldr	r4, [r0, #8]
 80009c6:	4605      	mov	r5, r0
 80009c8:	460e      	mov	r6, r1
 80009ca:	b90b      	cbnz	r3, 80009d0 <_puts_r+0x10>
 80009cc:	f7ff ffc2 	bl	8000954 <__sinit>
 80009d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009d2:	07db      	lsls	r3, r3, #31
 80009d4:	d405      	bmi.n	80009e2 <_puts_r+0x22>
 80009d6:	89a3      	ldrh	r3, [r4, #12]
 80009d8:	0598      	lsls	r0, r3, #22
 80009da:	d402      	bmi.n	80009e2 <_puts_r+0x22>
 80009dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009de:	f000 f99b 	bl	8000d18 <__retarget_lock_acquire_recursive>
 80009e2:	89a3      	ldrh	r3, [r4, #12]
 80009e4:	0719      	lsls	r1, r3, #28
 80009e6:	d513      	bpl.n	8000a10 <_puts_r+0x50>
 80009e8:	6923      	ldr	r3, [r4, #16]
 80009ea:	b18b      	cbz	r3, 8000a10 <_puts_r+0x50>
 80009ec:	3e01      	subs	r6, #1
 80009ee:	68a3      	ldr	r3, [r4, #8]
 80009f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009f4:	3b01      	subs	r3, #1
 80009f6:	60a3      	str	r3, [r4, #8]
 80009f8:	b9e9      	cbnz	r1, 8000a36 <_puts_r+0x76>
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da2e      	bge.n	8000a5c <_puts_r+0x9c>
 80009fe:	4622      	mov	r2, r4
 8000a00:	210a      	movs	r1, #10
 8000a02:	4628      	mov	r0, r5
 8000a04:	f000 f87b 	bl	8000afe <__swbuf_r>
 8000a08:	3001      	adds	r0, #1
 8000a0a:	d007      	beq.n	8000a1c <_puts_r+0x5c>
 8000a0c:	250a      	movs	r5, #10
 8000a0e:	e007      	b.n	8000a20 <_puts_r+0x60>
 8000a10:	4621      	mov	r1, r4
 8000a12:	4628      	mov	r0, r5
 8000a14:	f000 f8b0 	bl	8000b78 <__swsetup_r>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d0e7      	beq.n	80009ec <_puts_r+0x2c>
 8000a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8000a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a22:	07da      	lsls	r2, r3, #31
 8000a24:	d405      	bmi.n	8000a32 <_puts_r+0x72>
 8000a26:	89a3      	ldrh	r3, [r4, #12]
 8000a28:	059b      	lsls	r3, r3, #22
 8000a2a:	d402      	bmi.n	8000a32 <_puts_r+0x72>
 8000a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a2e:	f000 f974 	bl	8000d1a <__retarget_lock_release_recursive>
 8000a32:	4628      	mov	r0, r5
 8000a34:	bd70      	pop	{r4, r5, r6, pc}
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da04      	bge.n	8000a44 <_puts_r+0x84>
 8000a3a:	69a2      	ldr	r2, [r4, #24]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dc06      	bgt.n	8000a4e <_puts_r+0x8e>
 8000a40:	290a      	cmp	r1, #10
 8000a42:	d004      	beq.n	8000a4e <_puts_r+0x8e>
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	6022      	str	r2, [r4, #0]
 8000a4a:	7019      	strb	r1, [r3, #0]
 8000a4c:	e7cf      	b.n	80009ee <_puts_r+0x2e>
 8000a4e:	4622      	mov	r2, r4
 8000a50:	4628      	mov	r0, r5
 8000a52:	f000 f854 	bl	8000afe <__swbuf_r>
 8000a56:	3001      	adds	r0, #1
 8000a58:	d1c9      	bne.n	80009ee <_puts_r+0x2e>
 8000a5a:	e7df      	b.n	8000a1c <_puts_r+0x5c>
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	250a      	movs	r5, #10
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	6022      	str	r2, [r4, #0]
 8000a64:	701d      	strb	r5, [r3, #0]
 8000a66:	e7db      	b.n	8000a20 <_puts_r+0x60>

08000a68 <puts>:
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <puts+0xc>)
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	f7ff bfa7 	b.w	80009c0 <_puts_r>
 8000a72:	bf00      	nop
 8000a74:	2000005c 	.word	0x2000005c

08000a78 <__sread>:
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	460c      	mov	r4, r1
 8000a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a80:	f000 f8fc 	bl	8000c7c <_read_r>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	bfab      	itete	ge
 8000a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8000a8c:	181b      	addge	r3, r3, r0
 8000a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a92:	bfac      	ite	ge
 8000a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a96:	81a3      	strhlt	r3, [r4, #12]
 8000a98:	bd10      	pop	{r4, pc}

08000a9a <__swrite>:
 8000a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a9e:	461f      	mov	r7, r3
 8000aa0:	898b      	ldrh	r3, [r1, #12]
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	4605      	mov	r5, r0
 8000aa6:	460c      	mov	r4, r1
 8000aa8:	4616      	mov	r6, r2
 8000aaa:	d505      	bpl.n	8000ab8 <__swrite+0x1e>
 8000aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f000 f8d0 	bl	8000c58 <_lseek_r>
 8000ab8:	89a3      	ldrh	r3, [r4, #12]
 8000aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ac2:	81a3      	strh	r3, [r4, #12]
 8000ac4:	4632      	mov	r2, r6
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4628      	mov	r0, r5
 8000aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ace:	f000 b8e7 	b.w	8000ca0 <_write_r>

08000ad2 <__sseek>:
 8000ad2:	b510      	push	{r4, lr}
 8000ad4:	460c      	mov	r4, r1
 8000ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ada:	f000 f8bd 	bl	8000c58 <_lseek_r>
 8000ade:	1c43      	adds	r3, r0, #1
 8000ae0:	89a3      	ldrh	r3, [r4, #12]
 8000ae2:	bf15      	itete	ne
 8000ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000aee:	81a3      	strheq	r3, [r4, #12]
 8000af0:	bf18      	it	ne
 8000af2:	81a3      	strhne	r3, [r4, #12]
 8000af4:	bd10      	pop	{r4, pc}

08000af6 <__sclose>:
 8000af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000afa:	f000 b89d 	b.w	8000c38 <_close_r>

08000afe <__swbuf_r>:
 8000afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b00:	460e      	mov	r6, r1
 8000b02:	4614      	mov	r4, r2
 8000b04:	4605      	mov	r5, r0
 8000b06:	b118      	cbz	r0, 8000b10 <__swbuf_r+0x12>
 8000b08:	6a03      	ldr	r3, [r0, #32]
 8000b0a:	b90b      	cbnz	r3, 8000b10 <__swbuf_r+0x12>
 8000b0c:	f7ff ff22 	bl	8000954 <__sinit>
 8000b10:	69a3      	ldr	r3, [r4, #24]
 8000b12:	60a3      	str	r3, [r4, #8]
 8000b14:	89a3      	ldrh	r3, [r4, #12]
 8000b16:	071a      	lsls	r2, r3, #28
 8000b18:	d525      	bpl.n	8000b66 <__swbuf_r+0x68>
 8000b1a:	6923      	ldr	r3, [r4, #16]
 8000b1c:	b31b      	cbz	r3, 8000b66 <__swbuf_r+0x68>
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	6922      	ldr	r2, [r4, #16]
 8000b22:	1a98      	subs	r0, r3, r2
 8000b24:	6963      	ldr	r3, [r4, #20]
 8000b26:	b2f6      	uxtb	r6, r6
 8000b28:	4283      	cmp	r3, r0
 8000b2a:	4637      	mov	r7, r6
 8000b2c:	dc04      	bgt.n	8000b38 <__swbuf_r+0x3a>
 8000b2e:	4621      	mov	r1, r4
 8000b30:	4628      	mov	r0, r5
 8000b32:	f000 fa71 	bl	8001018 <_fflush_r>
 8000b36:	b9e0      	cbnz	r0, 8000b72 <__swbuf_r+0x74>
 8000b38:	68a3      	ldr	r3, [r4, #8]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	60a3      	str	r3, [r4, #8]
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	6022      	str	r2, [r4, #0]
 8000b44:	701e      	strb	r6, [r3, #0]
 8000b46:	6962      	ldr	r2, [r4, #20]
 8000b48:	1c43      	adds	r3, r0, #1
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d004      	beq.n	8000b58 <__swbuf_r+0x5a>
 8000b4e:	89a3      	ldrh	r3, [r4, #12]
 8000b50:	07db      	lsls	r3, r3, #31
 8000b52:	d506      	bpl.n	8000b62 <__swbuf_r+0x64>
 8000b54:	2e0a      	cmp	r6, #10
 8000b56:	d104      	bne.n	8000b62 <__swbuf_r+0x64>
 8000b58:	4621      	mov	r1, r4
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f000 fa5c 	bl	8001018 <_fflush_r>
 8000b60:	b938      	cbnz	r0, 8000b72 <__swbuf_r+0x74>
 8000b62:	4638      	mov	r0, r7
 8000b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b66:	4621      	mov	r1, r4
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f000 f805 	bl	8000b78 <__swsetup_r>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d0d5      	beq.n	8000b1e <__swbuf_r+0x20>
 8000b72:	f04f 37ff 	mov.w	r7, #4294967295
 8000b76:	e7f4      	b.n	8000b62 <__swbuf_r+0x64>

08000b78 <__swsetup_r>:
 8000b78:	b538      	push	{r3, r4, r5, lr}
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <__swsetup_r+0xac>)
 8000b7c:	4605      	mov	r5, r0
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	460c      	mov	r4, r1
 8000b82:	b118      	cbz	r0, 8000b8c <__swsetup_r+0x14>
 8000b84:	6a03      	ldr	r3, [r0, #32]
 8000b86:	b90b      	cbnz	r3, 8000b8c <__swsetup_r+0x14>
 8000b88:	f7ff fee4 	bl	8000954 <__sinit>
 8000b8c:	89a3      	ldrh	r3, [r4, #12]
 8000b8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b92:	0718      	lsls	r0, r3, #28
 8000b94:	d422      	bmi.n	8000bdc <__swsetup_r+0x64>
 8000b96:	06d9      	lsls	r1, r3, #27
 8000b98:	d407      	bmi.n	8000baa <__swsetup_r+0x32>
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	602b      	str	r3, [r5, #0]
 8000b9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ba2:	81a3      	strh	r3, [r4, #12]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	e034      	b.n	8000c14 <__swsetup_r+0x9c>
 8000baa:	0758      	lsls	r0, r3, #29
 8000bac:	d512      	bpl.n	8000bd4 <__swsetup_r+0x5c>
 8000bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bb0:	b141      	cbz	r1, 8000bc4 <__swsetup_r+0x4c>
 8000bb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	d002      	beq.n	8000bc0 <__swsetup_r+0x48>
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f000 f8ae 	bl	8000d1c <_free_r>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	6363      	str	r3, [r4, #52]	; 0x34
 8000bc4:	89a3      	ldrh	r3, [r4, #12]
 8000bc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bca:	81a3      	strh	r3, [r4, #12]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	6063      	str	r3, [r4, #4]
 8000bd0:	6923      	ldr	r3, [r4, #16]
 8000bd2:	6023      	str	r3, [r4, #0]
 8000bd4:	89a3      	ldrh	r3, [r4, #12]
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	81a3      	strh	r3, [r4, #12]
 8000bdc:	6923      	ldr	r3, [r4, #16]
 8000bde:	b94b      	cbnz	r3, 8000bf4 <__swsetup_r+0x7c>
 8000be0:	89a3      	ldrh	r3, [r4, #12]
 8000be2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bea:	d003      	beq.n	8000bf4 <__swsetup_r+0x7c>
 8000bec:	4621      	mov	r1, r4
 8000bee:	4628      	mov	r0, r5
 8000bf0:	f000 fa60 	bl	80010b4 <__smakebuf_r>
 8000bf4:	89a0      	ldrh	r0, [r4, #12]
 8000bf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bfa:	f010 0301 	ands.w	r3, r0, #1
 8000bfe:	d00a      	beq.n	8000c16 <__swsetup_r+0x9e>
 8000c00:	2300      	movs	r3, #0
 8000c02:	60a3      	str	r3, [r4, #8]
 8000c04:	6963      	ldr	r3, [r4, #20]
 8000c06:	425b      	negs	r3, r3
 8000c08:	61a3      	str	r3, [r4, #24]
 8000c0a:	6923      	ldr	r3, [r4, #16]
 8000c0c:	b943      	cbnz	r3, 8000c20 <__swsetup_r+0xa8>
 8000c0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c12:	d1c4      	bne.n	8000b9e <__swsetup_r+0x26>
 8000c14:	bd38      	pop	{r3, r4, r5, pc}
 8000c16:	0781      	lsls	r1, r0, #30
 8000c18:	bf58      	it	pl
 8000c1a:	6963      	ldrpl	r3, [r4, #20]
 8000c1c:	60a3      	str	r3, [r4, #8]
 8000c1e:	e7f4      	b.n	8000c0a <__swsetup_r+0x92>
 8000c20:	2000      	movs	r0, #0
 8000c22:	e7f7      	b.n	8000c14 <__swsetup_r+0x9c>
 8000c24:	2000005c 	.word	0x2000005c

08000c28 <memset>:
 8000c28:	4402      	add	r2, r0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d100      	bne.n	8000c32 <memset+0xa>
 8000c30:	4770      	bx	lr
 8000c32:	f803 1b01 	strb.w	r1, [r3], #1
 8000c36:	e7f9      	b.n	8000c2c <memset+0x4>

08000c38 <_close_r>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	4d06      	ldr	r5, [pc, #24]	; (8000c54 <_close_r+0x1c>)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4608      	mov	r0, r1
 8000c42:	602b      	str	r3, [r5, #0]
 8000c44:	f7ff fd77 	bl	8000736 <_close>
 8000c48:	1c43      	adds	r3, r0, #1
 8000c4a:	d102      	bne.n	8000c52 <_close_r+0x1a>
 8000c4c:	682b      	ldr	r3, [r5, #0]
 8000c4e:	b103      	cbz	r3, 8000c52 <_close_r+0x1a>
 8000c50:	6023      	str	r3, [r4, #0]
 8000c52:	bd38      	pop	{r3, r4, r5, pc}
 8000c54:	20000210 	.word	0x20000210

08000c58 <_lseek_r>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	4d07      	ldr	r5, [pc, #28]	; (8000c78 <_lseek_r+0x20>)
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	4611      	mov	r1, r2
 8000c62:	2200      	movs	r2, #0
 8000c64:	602a      	str	r2, [r5, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	f7ff fd8c 	bl	8000784 <_lseek>
 8000c6c:	1c43      	adds	r3, r0, #1
 8000c6e:	d102      	bne.n	8000c76 <_lseek_r+0x1e>
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	b103      	cbz	r3, 8000c76 <_lseek_r+0x1e>
 8000c74:	6023      	str	r3, [r4, #0]
 8000c76:	bd38      	pop	{r3, r4, r5, pc}
 8000c78:	20000210 	.word	0x20000210

08000c7c <_read_r>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	4d07      	ldr	r5, [pc, #28]	; (8000c9c <_read_r+0x20>)
 8000c80:	4604      	mov	r4, r0
 8000c82:	4608      	mov	r0, r1
 8000c84:	4611      	mov	r1, r2
 8000c86:	2200      	movs	r2, #0
 8000c88:	602a      	str	r2, [r5, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f7ff fd1a 	bl	80006c4 <_read>
 8000c90:	1c43      	adds	r3, r0, #1
 8000c92:	d102      	bne.n	8000c9a <_read_r+0x1e>
 8000c94:	682b      	ldr	r3, [r5, #0]
 8000c96:	b103      	cbz	r3, 8000c9a <_read_r+0x1e>
 8000c98:	6023      	str	r3, [r4, #0]
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
 8000c9c:	20000210 	.word	0x20000210

08000ca0 <_write_r>:
 8000ca0:	b538      	push	{r3, r4, r5, lr}
 8000ca2:	4d07      	ldr	r5, [pc, #28]	; (8000cc0 <_write_r+0x20>)
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	4611      	mov	r1, r2
 8000caa:	2200      	movs	r2, #0
 8000cac:	602a      	str	r2, [r5, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f7ff fd25 	bl	80006fe <_write>
 8000cb4:	1c43      	adds	r3, r0, #1
 8000cb6:	d102      	bne.n	8000cbe <_write_r+0x1e>
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	b103      	cbz	r3, 8000cbe <_write_r+0x1e>
 8000cbc:	6023      	str	r3, [r4, #0]
 8000cbe:	bd38      	pop	{r3, r4, r5, pc}
 8000cc0:	20000210 	.word	0x20000210

08000cc4 <__errno>:
 8000cc4:	4b01      	ldr	r3, [pc, #4]	; (8000ccc <__errno+0x8>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000005c 	.word	0x2000005c

08000cd0 <__libc_init_array>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4d0d      	ldr	r5, [pc, #52]	; (8000d08 <__libc_init_array+0x38>)
 8000cd4:	4c0d      	ldr	r4, [pc, #52]	; (8000d0c <__libc_init_array+0x3c>)
 8000cd6:	1b64      	subs	r4, r4, r5
 8000cd8:	10a4      	asrs	r4, r4, #2
 8000cda:	2600      	movs	r6, #0
 8000cdc:	42a6      	cmp	r6, r4
 8000cde:	d109      	bne.n	8000cf4 <__libc_init_array+0x24>
 8000ce0:	4d0b      	ldr	r5, [pc, #44]	; (8000d10 <__libc_init_array+0x40>)
 8000ce2:	4c0c      	ldr	r4, [pc, #48]	; (8000d14 <__libc_init_array+0x44>)
 8000ce4:	f000 fa54 	bl	8001190 <_init>
 8000ce8:	1b64      	subs	r4, r4, r5
 8000cea:	10a4      	asrs	r4, r4, #2
 8000cec:	2600      	movs	r6, #0
 8000cee:	42a6      	cmp	r6, r4
 8000cf0:	d105      	bne.n	8000cfe <__libc_init_array+0x2e>
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
 8000cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf8:	4798      	blx	r3
 8000cfa:	3601      	adds	r6, #1
 8000cfc:	e7ee      	b.n	8000cdc <__libc_init_array+0xc>
 8000cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d02:	4798      	blx	r3
 8000d04:	3601      	adds	r6, #1
 8000d06:	e7f2      	b.n	8000cee <__libc_init_array+0x1e>
 8000d08:	080011f0 	.word	0x080011f0
 8000d0c:	080011f0 	.word	0x080011f0
 8000d10:	080011f0 	.word	0x080011f0
 8000d14:	080011f4 	.word	0x080011f4

08000d18 <__retarget_lock_acquire_recursive>:
 8000d18:	4770      	bx	lr

08000d1a <__retarget_lock_release_recursive>:
 8000d1a:	4770      	bx	lr

08000d1c <_free_r>:
 8000d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d1e:	2900      	cmp	r1, #0
 8000d20:	d044      	beq.n	8000dac <_free_r+0x90>
 8000d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d26:	9001      	str	r0, [sp, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8000d2e:	bfb8      	it	lt
 8000d30:	18e4      	addlt	r4, r4, r3
 8000d32:	f000 f8df 	bl	8000ef4 <__malloc_lock>
 8000d36:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <_free_r+0x94>)
 8000d38:	9801      	ldr	r0, [sp, #4]
 8000d3a:	6813      	ldr	r3, [r2, #0]
 8000d3c:	b933      	cbnz	r3, 8000d4c <_free_r+0x30>
 8000d3e:	6063      	str	r3, [r4, #4]
 8000d40:	6014      	str	r4, [r2, #0]
 8000d42:	b003      	add	sp, #12
 8000d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d48:	f000 b8da 	b.w	8000f00 <__malloc_unlock>
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <_free_r+0x46>
 8000d50:	6825      	ldr	r5, [r4, #0]
 8000d52:	1961      	adds	r1, r4, r5
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf01      	itttt	eq
 8000d58:	6819      	ldreq	r1, [r3, #0]
 8000d5a:	685b      	ldreq	r3, [r3, #4]
 8000d5c:	1949      	addeq	r1, r1, r5
 8000d5e:	6021      	streq	r1, [r4, #0]
 8000d60:	e7ed      	b.n	8000d3e <_free_r+0x22>
 8000d62:	461a      	mov	r2, r3
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	b10b      	cbz	r3, 8000d6c <_free_r+0x50>
 8000d68:	42a3      	cmp	r3, r4
 8000d6a:	d9fa      	bls.n	8000d62 <_free_r+0x46>
 8000d6c:	6811      	ldr	r1, [r2, #0]
 8000d6e:	1855      	adds	r5, r2, r1
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	d10b      	bne.n	8000d8c <_free_r+0x70>
 8000d74:	6824      	ldr	r4, [r4, #0]
 8000d76:	4421      	add	r1, r4
 8000d78:	1854      	adds	r4, r2, r1
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	6011      	str	r1, [r2, #0]
 8000d7e:	d1e0      	bne.n	8000d42 <_free_r+0x26>
 8000d80:	681c      	ldr	r4, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	6053      	str	r3, [r2, #4]
 8000d86:	440c      	add	r4, r1
 8000d88:	6014      	str	r4, [r2, #0]
 8000d8a:	e7da      	b.n	8000d42 <_free_r+0x26>
 8000d8c:	d902      	bls.n	8000d94 <_free_r+0x78>
 8000d8e:	230c      	movs	r3, #12
 8000d90:	6003      	str	r3, [r0, #0]
 8000d92:	e7d6      	b.n	8000d42 <_free_r+0x26>
 8000d94:	6825      	ldr	r5, [r4, #0]
 8000d96:	1961      	adds	r1, r4, r5
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf04      	itt	eq
 8000d9c:	6819      	ldreq	r1, [r3, #0]
 8000d9e:	685b      	ldreq	r3, [r3, #4]
 8000da0:	6063      	str	r3, [r4, #4]
 8000da2:	bf04      	itt	eq
 8000da4:	1949      	addeq	r1, r1, r5
 8000da6:	6021      	streq	r1, [r4, #0]
 8000da8:	6054      	str	r4, [r2, #4]
 8000daa:	e7ca      	b.n	8000d42 <_free_r+0x26>
 8000dac:	b003      	add	sp, #12
 8000dae:	bd30      	pop	{r4, r5, pc}
 8000db0:	20000218 	.word	0x20000218

08000db4 <sbrk_aligned>:
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	4e0e      	ldr	r6, [pc, #56]	; (8000df0 <sbrk_aligned+0x3c>)
 8000db8:	460c      	mov	r4, r1
 8000dba:	6831      	ldr	r1, [r6, #0]
 8000dbc:	4605      	mov	r5, r0
 8000dbe:	b911      	cbnz	r1, 8000dc6 <sbrk_aligned+0x12>
 8000dc0:	f000 f9d6 	bl	8001170 <_sbrk_r>
 8000dc4:	6030      	str	r0, [r6, #0]
 8000dc6:	4621      	mov	r1, r4
 8000dc8:	4628      	mov	r0, r5
 8000dca:	f000 f9d1 	bl	8001170 <_sbrk_r>
 8000dce:	1c43      	adds	r3, r0, #1
 8000dd0:	d00a      	beq.n	8000de8 <sbrk_aligned+0x34>
 8000dd2:	1cc4      	adds	r4, r0, #3
 8000dd4:	f024 0403 	bic.w	r4, r4, #3
 8000dd8:	42a0      	cmp	r0, r4
 8000dda:	d007      	beq.n	8000dec <sbrk_aligned+0x38>
 8000ddc:	1a21      	subs	r1, r4, r0
 8000dde:	4628      	mov	r0, r5
 8000de0:	f000 f9c6 	bl	8001170 <_sbrk_r>
 8000de4:	3001      	adds	r0, #1
 8000de6:	d101      	bne.n	8000dec <sbrk_aligned+0x38>
 8000de8:	f04f 34ff 	mov.w	r4, #4294967295
 8000dec:	4620      	mov	r0, r4
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	2000021c 	.word	0x2000021c

08000df4 <_malloc_r>:
 8000df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000df8:	1ccd      	adds	r5, r1, #3
 8000dfa:	f025 0503 	bic.w	r5, r5, #3
 8000dfe:	3508      	adds	r5, #8
 8000e00:	2d0c      	cmp	r5, #12
 8000e02:	bf38      	it	cc
 8000e04:	250c      	movcc	r5, #12
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	4607      	mov	r7, r0
 8000e0a:	db01      	blt.n	8000e10 <_malloc_r+0x1c>
 8000e0c:	42a9      	cmp	r1, r5
 8000e0e:	d905      	bls.n	8000e1c <_malloc_r+0x28>
 8000e10:	230c      	movs	r3, #12
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	2600      	movs	r6, #0
 8000e16:	4630      	mov	r0, r6
 8000e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ef0 <_malloc_r+0xfc>
 8000e20:	f000 f868 	bl	8000ef4 <__malloc_lock>
 8000e24:	f8d8 3000 	ldr.w	r3, [r8]
 8000e28:	461c      	mov	r4, r3
 8000e2a:	bb5c      	cbnz	r4, 8000e84 <_malloc_r+0x90>
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	4638      	mov	r0, r7
 8000e30:	f7ff ffc0 	bl	8000db4 <sbrk_aligned>
 8000e34:	1c43      	adds	r3, r0, #1
 8000e36:	4604      	mov	r4, r0
 8000e38:	d155      	bne.n	8000ee6 <_malloc_r+0xf2>
 8000e3a:	f8d8 4000 	ldr.w	r4, [r8]
 8000e3e:	4626      	mov	r6, r4
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d145      	bne.n	8000ed0 <_malloc_r+0xdc>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d048      	beq.n	8000eda <_malloc_r+0xe6>
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	eb04 0903 	add.w	r9, r4, r3
 8000e52:	f000 f98d 	bl	8001170 <_sbrk_r>
 8000e56:	4581      	cmp	r9, r0
 8000e58:	d13f      	bne.n	8000eda <_malloc_r+0xe6>
 8000e5a:	6821      	ldr	r1, [r4, #0]
 8000e5c:	1a6d      	subs	r5, r5, r1
 8000e5e:	4629      	mov	r1, r5
 8000e60:	4638      	mov	r0, r7
 8000e62:	f7ff ffa7 	bl	8000db4 <sbrk_aligned>
 8000e66:	3001      	adds	r0, #1
 8000e68:	d037      	beq.n	8000eda <_malloc_r+0xe6>
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	442b      	add	r3, r5
 8000e6e:	6023      	str	r3, [r4, #0]
 8000e70:	f8d8 3000 	ldr.w	r3, [r8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d038      	beq.n	8000eea <_malloc_r+0xf6>
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	42a2      	cmp	r2, r4
 8000e7c:	d12b      	bne.n	8000ed6 <_malloc_r+0xe2>
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	e00f      	b.n	8000ea4 <_malloc_r+0xb0>
 8000e84:	6822      	ldr	r2, [r4, #0]
 8000e86:	1b52      	subs	r2, r2, r5
 8000e88:	d41f      	bmi.n	8000eca <_malloc_r+0xd6>
 8000e8a:	2a0b      	cmp	r2, #11
 8000e8c:	d917      	bls.n	8000ebe <_malloc_r+0xca>
 8000e8e:	1961      	adds	r1, r4, r5
 8000e90:	42a3      	cmp	r3, r4
 8000e92:	6025      	str	r5, [r4, #0]
 8000e94:	bf18      	it	ne
 8000e96:	6059      	strne	r1, [r3, #4]
 8000e98:	6863      	ldr	r3, [r4, #4]
 8000e9a:	bf08      	it	eq
 8000e9c:	f8c8 1000 	streq.w	r1, [r8]
 8000ea0:	5162      	str	r2, [r4, r5]
 8000ea2:	604b      	str	r3, [r1, #4]
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	f104 060b 	add.w	r6, r4, #11
 8000eaa:	f000 f829 	bl	8000f00 <__malloc_unlock>
 8000eae:	f026 0607 	bic.w	r6, r6, #7
 8000eb2:	1d23      	adds	r3, r4, #4
 8000eb4:	1af2      	subs	r2, r6, r3
 8000eb6:	d0ae      	beq.n	8000e16 <_malloc_r+0x22>
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	50a3      	str	r3, [r4, r2]
 8000ebc:	e7ab      	b.n	8000e16 <_malloc_r+0x22>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	6862      	ldr	r2, [r4, #4]
 8000ec2:	d1dd      	bne.n	8000e80 <_malloc_r+0x8c>
 8000ec4:	f8c8 2000 	str.w	r2, [r8]
 8000ec8:	e7ec      	b.n	8000ea4 <_malloc_r+0xb0>
 8000eca:	4623      	mov	r3, r4
 8000ecc:	6864      	ldr	r4, [r4, #4]
 8000ece:	e7ac      	b.n	8000e2a <_malloc_r+0x36>
 8000ed0:	4634      	mov	r4, r6
 8000ed2:	6876      	ldr	r6, [r6, #4]
 8000ed4:	e7b4      	b.n	8000e40 <_malloc_r+0x4c>
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	e7cc      	b.n	8000e74 <_malloc_r+0x80>
 8000eda:	230c      	movs	r3, #12
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f000 f80e 	bl	8000f00 <__malloc_unlock>
 8000ee4:	e797      	b.n	8000e16 <_malloc_r+0x22>
 8000ee6:	6025      	str	r5, [r4, #0]
 8000ee8:	e7dc      	b.n	8000ea4 <_malloc_r+0xb0>
 8000eea:	605b      	str	r3, [r3, #4]
 8000eec:	deff      	udf	#255	; 0xff
 8000eee:	bf00      	nop
 8000ef0:	20000218 	.word	0x20000218

08000ef4 <__malloc_lock>:
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <__malloc_lock+0x8>)
 8000ef6:	f7ff bf0f 	b.w	8000d18 <__retarget_lock_acquire_recursive>
 8000efa:	bf00      	nop
 8000efc:	20000214 	.word	0x20000214

08000f00 <__malloc_unlock>:
 8000f00:	4801      	ldr	r0, [pc, #4]	; (8000f08 <__malloc_unlock+0x8>)
 8000f02:	f7ff bf0a 	b.w	8000d1a <__retarget_lock_release_recursive>
 8000f06:	bf00      	nop
 8000f08:	20000214 	.word	0x20000214

08000f0c <__sflush_r>:
 8000f0c:	898a      	ldrh	r2, [r1, #12]
 8000f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f12:	4605      	mov	r5, r0
 8000f14:	0710      	lsls	r0, r2, #28
 8000f16:	460c      	mov	r4, r1
 8000f18:	d458      	bmi.n	8000fcc <__sflush_r+0xc0>
 8000f1a:	684b      	ldr	r3, [r1, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dc05      	bgt.n	8000f2c <__sflush_r+0x20>
 8000f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	dc02      	bgt.n	8000f2c <__sflush_r+0x20>
 8000f26:	2000      	movs	r0, #0
 8000f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f2e:	2e00      	cmp	r6, #0
 8000f30:	d0f9      	beq.n	8000f26 <__sflush_r+0x1a>
 8000f32:	2300      	movs	r3, #0
 8000f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f38:	682f      	ldr	r7, [r5, #0]
 8000f3a:	6a21      	ldr	r1, [r4, #32]
 8000f3c:	602b      	str	r3, [r5, #0]
 8000f3e:	d032      	beq.n	8000fa6 <__sflush_r+0x9a>
 8000f40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f42:	89a3      	ldrh	r3, [r4, #12]
 8000f44:	075a      	lsls	r2, r3, #29
 8000f46:	d505      	bpl.n	8000f54 <__sflush_r+0x48>
 8000f48:	6863      	ldr	r3, [r4, #4]
 8000f4a:	1ac0      	subs	r0, r0, r3
 8000f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f4e:	b10b      	cbz	r3, 8000f54 <__sflush_r+0x48>
 8000f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f52:	1ac0      	subs	r0, r0, r3
 8000f54:	2300      	movs	r3, #0
 8000f56:	4602      	mov	r2, r0
 8000f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f5a:	6a21      	ldr	r1, [r4, #32]
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	47b0      	blx	r6
 8000f60:	1c43      	adds	r3, r0, #1
 8000f62:	89a3      	ldrh	r3, [r4, #12]
 8000f64:	d106      	bne.n	8000f74 <__sflush_r+0x68>
 8000f66:	6829      	ldr	r1, [r5, #0]
 8000f68:	291d      	cmp	r1, #29
 8000f6a:	d82b      	bhi.n	8000fc4 <__sflush_r+0xb8>
 8000f6c:	4a29      	ldr	r2, [pc, #164]	; (8001014 <__sflush_r+0x108>)
 8000f6e:	410a      	asrs	r2, r1
 8000f70:	07d6      	lsls	r6, r2, #31
 8000f72:	d427      	bmi.n	8000fc4 <__sflush_r+0xb8>
 8000f74:	2200      	movs	r2, #0
 8000f76:	6062      	str	r2, [r4, #4]
 8000f78:	04d9      	lsls	r1, r3, #19
 8000f7a:	6922      	ldr	r2, [r4, #16]
 8000f7c:	6022      	str	r2, [r4, #0]
 8000f7e:	d504      	bpl.n	8000f8a <__sflush_r+0x7e>
 8000f80:	1c42      	adds	r2, r0, #1
 8000f82:	d101      	bne.n	8000f88 <__sflush_r+0x7c>
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	b903      	cbnz	r3, 8000f8a <__sflush_r+0x7e>
 8000f88:	6560      	str	r0, [r4, #84]	; 0x54
 8000f8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f8c:	602f      	str	r7, [r5, #0]
 8000f8e:	2900      	cmp	r1, #0
 8000f90:	d0c9      	beq.n	8000f26 <__sflush_r+0x1a>
 8000f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f96:	4299      	cmp	r1, r3
 8000f98:	d002      	beq.n	8000fa0 <__sflush_r+0x94>
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	f7ff febe 	bl	8000d1c <_free_r>
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	6360      	str	r0, [r4, #52]	; 0x34
 8000fa4:	e7c0      	b.n	8000f28 <__sflush_r+0x1c>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4628      	mov	r0, r5
 8000faa:	47b0      	blx	r6
 8000fac:	1c41      	adds	r1, r0, #1
 8000fae:	d1c8      	bne.n	8000f42 <__sflush_r+0x36>
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0c5      	beq.n	8000f42 <__sflush_r+0x36>
 8000fb6:	2b1d      	cmp	r3, #29
 8000fb8:	d001      	beq.n	8000fbe <__sflush_r+0xb2>
 8000fba:	2b16      	cmp	r3, #22
 8000fbc:	d101      	bne.n	8000fc2 <__sflush_r+0xb6>
 8000fbe:	602f      	str	r7, [r5, #0]
 8000fc0:	e7b1      	b.n	8000f26 <__sflush_r+0x1a>
 8000fc2:	89a3      	ldrh	r3, [r4, #12]
 8000fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc8:	81a3      	strh	r3, [r4, #12]
 8000fca:	e7ad      	b.n	8000f28 <__sflush_r+0x1c>
 8000fcc:	690f      	ldr	r7, [r1, #16]
 8000fce:	2f00      	cmp	r7, #0
 8000fd0:	d0a9      	beq.n	8000f26 <__sflush_r+0x1a>
 8000fd2:	0793      	lsls	r3, r2, #30
 8000fd4:	680e      	ldr	r6, [r1, #0]
 8000fd6:	bf08      	it	eq
 8000fd8:	694b      	ldreq	r3, [r1, #20]
 8000fda:	600f      	str	r7, [r1, #0]
 8000fdc:	bf18      	it	ne
 8000fde:	2300      	movne	r3, #0
 8000fe0:	eba6 0807 	sub.w	r8, r6, r7
 8000fe4:	608b      	str	r3, [r1, #8]
 8000fe6:	f1b8 0f00 	cmp.w	r8, #0
 8000fea:	dd9c      	ble.n	8000f26 <__sflush_r+0x1a>
 8000fec:	6a21      	ldr	r1, [r4, #32]
 8000fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000ff0:	4643      	mov	r3, r8
 8000ff2:	463a      	mov	r2, r7
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	47b0      	blx	r6
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	dc06      	bgt.n	800100a <__sflush_r+0xfe>
 8000ffc:	89a3      	ldrh	r3, [r4, #12]
 8000ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001002:	81a3      	strh	r3, [r4, #12]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	e78e      	b.n	8000f28 <__sflush_r+0x1c>
 800100a:	4407      	add	r7, r0
 800100c:	eba8 0800 	sub.w	r8, r8, r0
 8001010:	e7e9      	b.n	8000fe6 <__sflush_r+0xda>
 8001012:	bf00      	nop
 8001014:	dfbffffe 	.word	0xdfbffffe

08001018 <_fflush_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	690b      	ldr	r3, [r1, #16]
 800101c:	4605      	mov	r5, r0
 800101e:	460c      	mov	r4, r1
 8001020:	b913      	cbnz	r3, 8001028 <_fflush_r+0x10>
 8001022:	2500      	movs	r5, #0
 8001024:	4628      	mov	r0, r5
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	b118      	cbz	r0, 8001032 <_fflush_r+0x1a>
 800102a:	6a03      	ldr	r3, [r0, #32]
 800102c:	b90b      	cbnz	r3, 8001032 <_fflush_r+0x1a>
 800102e:	f7ff fc91 	bl	8000954 <__sinit>
 8001032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f3      	beq.n	8001022 <_fflush_r+0xa>
 800103a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800103c:	07d0      	lsls	r0, r2, #31
 800103e:	d404      	bmi.n	800104a <_fflush_r+0x32>
 8001040:	0599      	lsls	r1, r3, #22
 8001042:	d402      	bmi.n	800104a <_fflush_r+0x32>
 8001044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001046:	f7ff fe67 	bl	8000d18 <__retarget_lock_acquire_recursive>
 800104a:	4628      	mov	r0, r5
 800104c:	4621      	mov	r1, r4
 800104e:	f7ff ff5d 	bl	8000f0c <__sflush_r>
 8001052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001054:	07da      	lsls	r2, r3, #31
 8001056:	4605      	mov	r5, r0
 8001058:	d4e4      	bmi.n	8001024 <_fflush_r+0xc>
 800105a:	89a3      	ldrh	r3, [r4, #12]
 800105c:	059b      	lsls	r3, r3, #22
 800105e:	d4e1      	bmi.n	8001024 <_fflush_r+0xc>
 8001060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001062:	f7ff fe5a 	bl	8000d1a <__retarget_lock_release_recursive>
 8001066:	e7dd      	b.n	8001024 <_fflush_r+0xc>

08001068 <__swhatbuf_r>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	460c      	mov	r4, r1
 800106c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001070:	2900      	cmp	r1, #0
 8001072:	b096      	sub	sp, #88	; 0x58
 8001074:	4615      	mov	r5, r2
 8001076:	461e      	mov	r6, r3
 8001078:	da0d      	bge.n	8001096 <__swhatbuf_r+0x2e>
 800107a:	89a3      	ldrh	r3, [r4, #12]
 800107c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001080:	f04f 0100 	mov.w	r1, #0
 8001084:	bf0c      	ite	eq
 8001086:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800108a:	2340      	movne	r3, #64	; 0x40
 800108c:	2000      	movs	r0, #0
 800108e:	6031      	str	r1, [r6, #0]
 8001090:	602b      	str	r3, [r5, #0]
 8001092:	b016      	add	sp, #88	; 0x58
 8001094:	bd70      	pop	{r4, r5, r6, pc}
 8001096:	466a      	mov	r2, sp
 8001098:	f000 f848 	bl	800112c <_fstat_r>
 800109c:	2800      	cmp	r0, #0
 800109e:	dbec      	blt.n	800107a <__swhatbuf_r+0x12>
 80010a0:	9901      	ldr	r1, [sp, #4]
 80010a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80010a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80010aa:	4259      	negs	r1, r3
 80010ac:	4159      	adcs	r1, r3
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	e7eb      	b.n	800108c <__swhatbuf_r+0x24>

080010b4 <__smakebuf_r>:
 80010b4:	898b      	ldrh	r3, [r1, #12]
 80010b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80010b8:	079d      	lsls	r5, r3, #30
 80010ba:	4606      	mov	r6, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	d507      	bpl.n	80010d0 <__smakebuf_r+0x1c>
 80010c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	6123      	str	r3, [r4, #16]
 80010c8:	2301      	movs	r3, #1
 80010ca:	6163      	str	r3, [r4, #20]
 80010cc:	b002      	add	sp, #8
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
 80010d0:	ab01      	add	r3, sp, #4
 80010d2:	466a      	mov	r2, sp
 80010d4:	f7ff ffc8 	bl	8001068 <__swhatbuf_r>
 80010d8:	9900      	ldr	r1, [sp, #0]
 80010da:	4605      	mov	r5, r0
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff fe89 	bl	8000df4 <_malloc_r>
 80010e2:	b948      	cbnz	r0, 80010f8 <__smakebuf_r+0x44>
 80010e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010e8:	059a      	lsls	r2, r3, #22
 80010ea:	d4ef      	bmi.n	80010cc <__smakebuf_r+0x18>
 80010ec:	f023 0303 	bic.w	r3, r3, #3
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	81a3      	strh	r3, [r4, #12]
 80010f6:	e7e3      	b.n	80010c0 <__smakebuf_r+0xc>
 80010f8:	89a3      	ldrh	r3, [r4, #12]
 80010fa:	6020      	str	r0, [r4, #0]
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	81a3      	strh	r3, [r4, #12]
 8001102:	9b00      	ldr	r3, [sp, #0]
 8001104:	6163      	str	r3, [r4, #20]
 8001106:	9b01      	ldr	r3, [sp, #4]
 8001108:	6120      	str	r0, [r4, #16]
 800110a:	b15b      	cbz	r3, 8001124 <__smakebuf_r+0x70>
 800110c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001110:	4630      	mov	r0, r6
 8001112:	f000 f81d 	bl	8001150 <_isatty_r>
 8001116:	b128      	cbz	r0, 8001124 <__smakebuf_r+0x70>
 8001118:	89a3      	ldrh	r3, [r4, #12]
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	81a3      	strh	r3, [r4, #12]
 8001124:	89a3      	ldrh	r3, [r4, #12]
 8001126:	431d      	orrs	r5, r3
 8001128:	81a5      	strh	r5, [r4, #12]
 800112a:	e7cf      	b.n	80010cc <__smakebuf_r+0x18>

0800112c <_fstat_r>:
 800112c:	b538      	push	{r3, r4, r5, lr}
 800112e:	4d07      	ldr	r5, [pc, #28]	; (800114c <_fstat_r+0x20>)
 8001130:	2300      	movs	r3, #0
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	602b      	str	r3, [r5, #0]
 800113a:	f7ff fb08 	bl	800074e <_fstat>
 800113e:	1c43      	adds	r3, r0, #1
 8001140:	d102      	bne.n	8001148 <_fstat_r+0x1c>
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	b103      	cbz	r3, 8001148 <_fstat_r+0x1c>
 8001146:	6023      	str	r3, [r4, #0]
 8001148:	bd38      	pop	{r3, r4, r5, pc}
 800114a:	bf00      	nop
 800114c:	20000210 	.word	0x20000210

08001150 <_isatty_r>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4d06      	ldr	r5, [pc, #24]	; (800116c <_isatty_r+0x1c>)
 8001154:	2300      	movs	r3, #0
 8001156:	4604      	mov	r4, r0
 8001158:	4608      	mov	r0, r1
 800115a:	602b      	str	r3, [r5, #0]
 800115c:	f7ff fb07 	bl	800076e <_isatty>
 8001160:	1c43      	adds	r3, r0, #1
 8001162:	d102      	bne.n	800116a <_isatty_r+0x1a>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	b103      	cbz	r3, 800116a <_isatty_r+0x1a>
 8001168:	6023      	str	r3, [r4, #0]
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	20000210 	.word	0x20000210

08001170 <_sbrk_r>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4d06      	ldr	r5, [pc, #24]	; (800118c <_sbrk_r+0x1c>)
 8001174:	2300      	movs	r3, #0
 8001176:	4604      	mov	r4, r0
 8001178:	4608      	mov	r0, r1
 800117a:	602b      	str	r3, [r5, #0]
 800117c:	f7ff fb10 	bl	80007a0 <_sbrk>
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	d102      	bne.n	800118a <_sbrk_r+0x1a>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	b103      	cbz	r3, 800118a <_sbrk_r+0x1a>
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	bd38      	pop	{r3, r4, r5, pc}
 800118c:	20000210 	.word	0x20000210

08001190 <_init>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	bf00      	nop
 8001194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001196:	bc08      	pop	{r3}
 8001198:	469e      	mov	lr, r3
 800119a:	4770      	bx	lr

0800119c <_fini>:
 800119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119e:	bf00      	nop
 80011a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011a2:	bc08      	pop	{r3}
 80011a4:	469e      	mov	lr, r3
 80011a6:	4770      	bx	lr
